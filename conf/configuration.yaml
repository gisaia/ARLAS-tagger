server:
  requestLog:
    appenders:
      - type: file
        currentLogFilename: ${ARLAS_TAGGER_ACCESS_LOG_FILE:-arlas-tagger-access.log}
        archivedLogFilenamePattern: ${ACCESS_TAGGER_LOG_FILE_ARCHIVE:-arlas-tagger-access-%d.log.gz}
  registerDefaultExceptionMappers: false
  type: simple
  rootPath: ${ARLAS_TAGGER_PREFIX:-/arlas_tagger}
  applicationContextPath: ${ARLAS_TAGGER_APP_PATH:-/}
  adminContextPath: ${ARLAS_TAGGER_ADMIN_PATH:-/admin}
  connector:
    type: http
    port: ${ARLAS_TAGGER_PORT:-9998}
  maxThreads: ${ARLAS_TAGGER_MAX_THREADS:-1024}
  minThreads: ${ARLAS_TAGGER_MIN_THREADS:-8}
  maxQueuedRequests: ${ARLAS_TAGGER_MAX_QUEUED_REQUESTS:-1024}

########################################################
############ LOGGING                     ###############
########################################################
# Configuration console and file LOGGING
logging:
  level: ${ARLAS_LOGGING_LEVEL:-INFO}
  loggers:
    "org.apache.kafka": ${ARLAS_LOGGING_KAFKA_LEVEL:-INFO}
    "javax.management.mbeanserver": ${ARLAS_LOGGING_MBEAN_LEVEL:-INFO}
  appenders:
    - type: console
      threshold:  ${ARLAS_LOGGING_CONSOLE_LEVEL:-INFO}
    - type: file
      currentLogFilename: ${ARLAS_LOGGING_FILE:-arlas.log}
      threshold: ${ARLAS_LOGGING_FILE_LEVEL:-INFO}
      archive: ${ARLAS_LOGGING_FILE_ARCHIVE:-true}
      archivedLogFilenamePattern: ${ARLAS_LOGGING_FILE_ARCHIVE_FILE_PATTERN:-arlas-%d.log}
      archivedFileCount: ${ARLAS_LOGGING_FILE_ARCHIVE_FILE_COUNT:-5}

########################################################
############ ARLAS TAGGER                ###############
########################################################
swagger: # Configuration of SWAGGER for generating documentation and APIs
  resourcePackage: io.arlas.tagger.rest # The java package to process for extracting the APIs

kafka_configuration:
  kafka_commit_max_retries: ${KAFKA_COMMIT_MAX_RETRIES:-3}
  kafka_consumer_poll_timeout: ${KAFKA_CONSUMER_POLL_TIMEOUT:-100}
  kafka_batch_size_tagref: ${KAFKA_BATCH_SIZE_TAGREF:-1}
  kafka_batch_size_tagexec: ${KAFKA_BATCH_SIZE_TAGEXEC:-10}
  kafka_number_tagexec: ${KAFKA_NUMBER_TAGEXEC:-1}
  kafka_bootstrap_servers: ${KAFKA_BROKERS:-localhost:9092}
  kafka_consumer_group_id_tagref_log: ${KAFKA_CONSUMER_GROUP_ID_TAGREF_LOG:-tagref_log_consumer_group}
  kafka_consumer_group_id_execute_tags: ${KAFKA_CONSUMER_GROUP_ID_EXECUTE_TAGS:-execute_tags_consumer_group}
  kafka_topic_tagref_log: ${KAFKA_TOPIC_TAGREF_LOG:-tagref_log}
  kafka_topic_execute_tags: ${KAFKA_TOPIC_EXECUTE_TAGS:-execute_tags}
  kafka_extra_properties: ${KAFKA_EXTRA_PROPS:-}

elastic_configuration:
  elastic_nodes: ${ARLAS_ELASTIC_NODES:-localhost:9300}
  elastic_sniffing: ${ARLAS_ELASTIC_SNIFFING:-false}
  elastic_cluster: ${ARLAS_ELASTIC_CLUSTER:-elasticsearch}
  elastic-enable-ssl: ${ARLAS_ELASTIC_ENABLE_SSL:-false}
  elastic-credentials: ${ARLAS_ELASTIC_CREDENTIALS:-}
  elastic-compress: ${ARLAS_ELASTIC_COMPRESS:-true}

arlas_collections_configuration:
  arlas_index:  ${ARLAS_COLLECTION_INDEX:-.arlas}
  arlas_cache_size: ${ARLAS_COLLECTION_CACHE_SIZE:-1000}
  arlas_cache_timeout: ${ARLAS_COLLECTION_CACHE_TIMEOUT:-60}

tagging_status_timeout: ${TAGGING_STATUS_TIMEOUT:-3600000}

arlas_cors_enabled: ${ARLAS_TAGGER_CORS_ENABLED:-true}




